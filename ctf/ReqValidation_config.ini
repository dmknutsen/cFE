#################################
# CTF Core Configuration
#################################

[core]

# Global verification command timeout
# Unit: Seconds if using generic system time manager)

telem_verify_timeout = 15.0

# How often to run verification commands until pass/timeout
# Unit: Seconds if using generic system time manager)
telem_verify_poll_period = 0.5


# Reset plugins between scripts? This is useful if
# scripts assume a fresh state of CFS/Trick_CFS
# If set to false, plugins will not shutdown/re-initialize
# between scripts
reset_plugins_between_scripts = true

# End test on fail?
end_test_on_fail = false

# Disabled plugins (directory name of plugin). Comma-seperated
disabled_plugins =

#################################
# CTF logging
#################################

[logging]

# Output directory for CTF scripts
results_output_dir = ../../../cFS/cfe/ctf/CTF_Results
temp_script_output_dir = ../../../cFS/cfe/ctf/script_outputs

# Filename for CTF Log
ctf_log_file = CTF_Log_File.log

# Generate a json version of the regression_results_summary (true)
# in addition to the text file version
json_results = True

# What level of logging?
# ERROR : only show error logs - very minimal output
# INFO :  only show  info, warning, error, and critical logs
# DEBUG:  show all logs!
log_level = DEBUG

#################################
# ccsds options
#################################
[ccsds]

# Name of the CCSDS Manager to be used by CTF for obtaining CCSDS Message Info
# Note - CTF will search for CCSDS managers under plugins/cfs/ccsds. Ensure that
#        the reader class is defined there.
# By default, CTF uses the CCDDExportReader which parses JSON output from the
# provided CCDD scripts under tools/
#
# Other readers can be implemented to handle specific types of CCSDS exports
# such as CSV, XTCE, etc... The custom readers should make use of the interface
# defined in the CCSDSInterface file.

# Filename of custom export reader (without extension)
CCSDS_reader_script_path = ../../../cfs_gw/tools/ctf/plugins/cfs/ccsds/ccdd_export_reader.py
# Classname of custom export reader
CCSDS_reader_class = CCDDExportReader
# Header Info Included in CCSDS Exports?
CCSDS_header_info_included = false

# Module name of CCSDS data types
CCSDS_module = plugins.cfs.ccsds.ccsds_6_7


#################################
# Base settings for cfs
#################################

[cfs]
# cfs protocol setting either:
# local  (local host)
# ssh     (ssh to host)
# sp0    (sp0 host)
cfs_protocol = local

# Build the CFS project?
build_cfs       = true

# Build directory for the CFS project
cfs_build_dir   = ../../../cfs_gw 

# Build command to run
cfs_build_cmd   = make; make install

# Run directory for the CFS project
cfs_run_dir     = ../../../cfs_gw/build/exe/lx2

# Executable to run within the cfs_run_dir
cfs_exe         = core-lx2

# Include CFS UDP port in arg (-p portNum)?
cfs_port_arg    = False

# Additional arguments
cfs_run_args    =

# Start CFS on CFS Plugin Initialization or when the StartCfs instruction is sent?
start_cfs_on_init = false

# CCSDS Data Directory
CCSDS_data_dir  = ../../../cfs_gw/ccdd/json

# What endianess is the target machine
endianess_of_target = little

# Output directory for CFS EVS
evs_log_file = evs_event_msgs.log

# Run in debug mode using GDB?
cfs_debug = false

# Run in a seperate terminal window as CTF?
cfs_run_in_xterm = True

#ip address of the target system
ip = 127.0.0.1

#CI commanding port
cmd_udp_port = 5010

# Set tlm_udp_port to 0 if you want the os to
# choose the port.
# If you want to manually set tlm_udp_port than set it equal to
# the port you want to use
tlm_udp_port = 5011

# Do you want to use TO or DIAG. Needs to be the exact name of the class to be used
# tlm_app_choice = DiagApi
tlm_app_choice = ToApi

# What CCSDS version
ccsds_ver = 2

# Depth of the EVS_EVENT_MSGID list
evs_tlm_list_depth = 500

# Decimal representation of EVS EVENT MSG MID to collect cfe EVS messages
# Hex: 0x0206 (SET1_CFE_EVS_LONG_EVENT_MSG_MID)
evs_event_msg_mid = 8198

#################################
#
#################################
[ssh]

# Command timeout for the execution plugin
command_timeout = 60

# Print stdout while command is running?
print_stdout = False

# Log stdout when command complete?
log_stdout = True
